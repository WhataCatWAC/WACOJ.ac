homepage:
  type: yaml
  desc: Homepage Config
  default:
    - width: 9
      bulletin: true
      contest: 5
      homework: 10
      training: 10
      ranking: 10
      discussion: 20
    - width: 3
      hitokoto: true
      starred_problems: 50
      recent_problems: 10
      discussion_nodes: true
      suggestion: true
langs:
  type: yaml
  desc: Code language settings
  default:
    __hint__:
      - ~ All keys starting with _ will be ignored
      - ~ Entries named like [foo], [foo].[bar] [foo].[baz]
      -   will be merged into one category.
      - ~ A entry named [foo].[bar] will inhert all options
      -   defined in entry [foo] if not overwritten
      - ~ code_file option defaults to foo.[name]
      - ~ highlight option defaults to [name]
      - ~ if highlight option was set, monaco option defaults
      -   to [highlight], otherwise defaults to [name]
      - ~ Compiling be be ignored if compile option wasn't set
      - ~ Key marked with a ? means the option is optional
      - (name):
          disabled?: whether to disable this language
          compile?: Compile Command
          code_file?: Where to write code file when compiling, defaults to `foo.[name]`
          execute: Command to execute the program
          highlight?: PrismJS highlight mode
          monaco?: Monaco editor mode
          time_limit_rate?: Time limit rate
          target?: Compiler output file, defaults to `foo`
          display: Display name
          compile_time_limit?: Compile time limit, in milliseconds
          address_space_limit?: Enable address space memory limit as CCF did
          process_limit?: Limit the number of thread
    cc.cc14:
      display: C++14
    cc.cc14o2:
      compile: /usr/bin/g++ -Wall -std=c++14 -o foo foo.cc -lm -O2 -I/include
      display: C++14(O2)
    cc.cc17:
      compile: /usr/bin/g++ -Wall -std=c++17 -o foo foo.cc -lm -I/include
      display: C++17
    cc.cc17o2:
      compile: /usr/bin/g++ -Wall -std=c++17 -o foo foo.cc -lm -O2 -I/include
      display: C++17(O2)
    cc.cc20:
      compile: /usr/bin/g++ -Wall -std=c++20 -o foo foo.cc -lm -I/include
      display: C++20
    cc.cc20o2:
      compile: /usr/bin/g++ -Wall -std=c++20 -o foo foo.cc -lm -O2 -I/include
      display: C++20(O2)
